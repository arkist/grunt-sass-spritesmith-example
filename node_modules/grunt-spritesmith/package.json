{
  "name": "grunt-spritesmith",
  "description": "Grunt task for converting a set of images into a spritesheet and corresponding CSS variables.",
  "version": "1.24.0",
  "homepage": "https://github.com/Ensighten/grunt-spritesmith",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "contributors": [
    {
      "name": "dpolivy"
    },
    {
      "name": "pdehaan",
      "url": "http://about.me/peterdehaan"
    },
    {
      "name": "MoOx",
      "email": "github@moox.io",
      "url": "http://moox.io/"
    },
    {
      "name": "jasonsandmeyer",
      "url": "http://jasonsandmeyer.com"
    },
    {
      "name": "scanieso",
      "email": "scanieso@gmail.com"
    },
    {
      "name": "STuFF",
      "email": "nchalleil@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Ensighten/grunt-spritesmith.git"
  },
  "bugs": {
    "url": "https://github.com/Ensighten/grunt-spritesmith/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Ensighten/grunt-spritesmith/blob/master/LICENSE-MIT"
    }
  ],
  "main": "tasks/grunt-spritesmith.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "cd src-test && grunt"
  },
  "dependencies": {
    "spritesmith": "~0.18.0",
    "json2css": "~4.3.0",
    "underscore": "~1.4.2",
    "url2": "1.0.0"
  },
  "_devDependencies": {
    "grunt": "~0.3.12",
    "grunt-contrib-clean": "~0.3.2"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.7.2"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "sprite",
    "image",
    "spritesheet",
    "css",
    "spritesmith",
    "cross-platform"
  ],
  "readme": "# grunt-spritesmith [![Build status](https://travis-ci.org/Ensighten/grunt-spritesmith.png?branch=master)](https://travis-ci.org/Ensighten/grunt-spritesmith)\n\nGrunt task for converting a set of images into a spritesheet and corresponding CSS variables.\n\nA folder of icons processed by `grunt-spritesmith`:\n\n[![Fork icon][fork-icon]][fork-icon] ![+][]\n[![GitHub icon][github-icon]][github-icon] ![+][]\n[![Twitter icon][twitter-icon]][twitter-icon] ![=][]\n\ngenerates a spritesheet:\n\n[![Spritesheet][spritesheet]][spritesheet]\n\nand CSS variables (available in [CSS][], [JSON][], [SASS][], [SCSS][SASS], [LESS][], [Stylus][]):\n\n```stylus\n$fork_offset_x = 0px;\n$fork_offset_y = 0px;\n$fork_width = 32px;\n$fork_height = 32px;\n...\n$github_offset_x = -32px;\n$github_offset_y = 0px;\n$github_width = 32px;\n$github_height = 32px;\n...\n```\n\n[+]: docs/plus.png\n[=]: docs/equals.png\n[fork-icon]: docs/fork.png\n[github-icon]: docs/github.png\n[twitter-icon]: docs/twitter.png\n[spritesheet]: docs/spritesheet.png\n\n[CSS]: https://developer.mozilla.org/en-US/docs/Web/CSS\n[JSON]: http://www.json.org/\n[SASS]: http://sass-lang.com/\n[LESS]: http://lesscss.org/\n[Stylus]: http://learnboost.github.com/stylus/\n\n### Cross-platform support\n\n`grunt-spritesmith` is supported and tested on Windows, Linux, and Mac OSX.\n\n## Getting Started\n`grunt-spritesmith` can be installed via npm: `npm install grunt-spritesmith`\n\n#### If you would like to use an engine with external dependencies, [verify you have satisfied its requirements][requirements]. ####\n\n[requirements]: #requirements\n\nThen, add and configure it to your grunt file (`grunt.js` or `Gruntfile.js` depending on your version):\n\n```javascript\nmodule.exports = function (grunt) {\n  // Configure grunt\n  grunt.initConfig({\n    sprite:{\n      all: {\n        src: 'path/to/your/sprites/*.png',\n        destImg: 'destination/of/spritesheet.png',\n        destCSS: 'destination/of/sprites.css'\n      }\n    }\n  });\n\n  // Load in `grunt-spritesmith`\n  grunt.loadNpmTasks('grunt-spritesmith');\n```\n\nRun the `grunt sprite` task:\n\n```bash\n$ grunt sprite\nRunning \"sprite:all\" (sprite) task\nFiles \"spritesheet.png\", \"sprites.styl\" created.\n\nDone, without errors.\n```\n\nResults are a spritesheet and CSS:\n\n[![Spritesheet][spritesheet]][spritesheet]\n\n```\n.icon-fork {\n  background-image: url(spritesheet.png);\n  background-position: 0px 0px;\n  width: 32px;\n  height: 32px;\n}\n...\n```\n\n## Usage\n`grunt-spritesmith` is a [grunt multitask][multitask]. It is configured on a per-task basis using the following template:\n\n[multitask]: http://gruntjs.com/configuring-tasks\n\n```js\ngrunt.initConfig({\n  'sprite': {\n    'all': {\n      // Sprite files to read in\n      'src': ['public/images/sprites/*.png'],\n\n      // Location to output spritesheet\n      'destImg': 'public/images/sprite.png',\n\n      // Stylus with variables under sprite names\n      'destCSS': 'public/css/sprite_positions.styl',\n\n      // OPTIONAL: Manual override for imgPath specified in CSS\n      'imgPath': '../sprite.png',\n\n      // OPTIONAL: Specify algorithm (top-down, left-right, diagonal [\\ format],\n          // alt-diagonal [/ format], binary-tree [best packing])\n      // Visual representations can be found below\n      'algorithm': 'alt-diagonal',\n\n      // OPTIONAL: Specify padding between images\n      'padding': 2,\n\n      // OPTIONAL: Specify engine (auto, phantomjs, canvas, gm, pngsmith)\n      'engine': 'canvas',\n\n      // OPTIONAL: Specify CSS format (inferred from destCSS' extension by default)\n          // (stylus, scss, scss_maps, sass, less, json, json_array, css)\n      'cssFormat': 'json',\n\n      // OPTIONAL: Specify a function or Mustache template to use for rendering destCSS\n          // Mutually exclusive to cssFormat\n      // More information can be found below\n      'cssTemplate': 'public/css/sprite_positions.styl.mustache',\n\n      // OPTIONAL: Map variable of each sprite\n      'cssVarMap': function (sprite) {\n        // `sprite` has `name`, `image` (full path), `x`, `y`\n        //   `width`, `height`, `total_width`, `total_height`\n        // EXAMPLE: Prefix all sprite names with 'sprite-'\n        sprite.name = 'sprite-' + sprite.name;\n      },\n\n      // OPTIONAL: Specify settings for engine\n      'engineOpts': {\n        'imagemagick': true\n      },\n\n      // OPTIONAL: Specify img options\n      'imgOpts': {\n         // Format of the image (inferred from destImg' extension by default) (jpg, png)\n         'format': 'png',\n\n         // gm only: Quality of image\n         'quality': 90,\n\n         // phantomjs only: Milliseconds to wait before terminating PhantomJS script\n         'timeout': 10000\n      },\n\n      // OPTIONAL: Specify css options\n      'cssOpts': {\n        // Some templates allow for skipping of function declarations\n        'functions': false,\n\n        // CSS template allows for overriding of CSS selectors\n        'cssClass': function (item) {\n          return '.sprite-' + item.name;\n        }\n      }\n    }\n  }\n});\n```\n\n### Algorithms\n|     top-down (default)    |           left-right          |          diagonal         |            alt-diagonal           |           binary-tree           |\n| ------------------------- | ----------------------------- | ------------------------- | --------------------------------- | ------------------------------- |\n| [![top-down][]][top-down] | [![left-right][]][left-right] | [![diagonal][]][diagonal] | [![alt-diagonal][]][alt-diagonal] | [![binary-tree][]][binary-tree] |\n\nFor best packing, use `binary-tree` which uses a solution to the [rectangle packing problem][packing-problem].\n\n[packing-problem]: http://en.wikipedia.org/wiki/Packing_problem\n\nIf you are worried about sprites being visible within other sprites, use `alt-diagonal`.\n\nIf you are using a repeating background, `top-down` or `left-right` depending on your occasion.\n\nThe `diagonal` algorithm exists for you if you need it.\n\n[top-down]: docs/top-down.png\n[left-right]: docs/left-right.png\n[diagonal]: docs/diagonal.png\n[alt-diagonal]: docs/alt-diagonal.png\n[binary-tree]: docs/binary-tree.png\n\n### cssTemplate\nThe `cssTemplate` option allows for specification of a custom templating function or [`Mustache`][mustache.js] template to render your CSS.\n\nIf you pass in a `Function`, it should have a signature of `function (params) {}` and return a `String`.\n\nIf you pass in a `String`, we treat this as a path; reading in the file and rendering it via [mustache.js][]. The template will be passed the same `params` as in the `Function` case.\n\n> An example template is https://github.com/twolfson/json2css/blob/4.2.0/lib/templates/stylus.template.mustache\n\n[mustache.js]: http://mustache.github.io/\n\n#### `params`\n`params` is an object with some normalization nicities from [`json2css`][], our default collection of templates.\n\n- params `Object`\n    - items `Object[]` - Array of sprite information\n      - name `String` - Name of the sprite file (sans extension)\n      - x `Number` - Horizontal position of sprite's left edge in spritesheet\n      - y `Number` - Vertical position of sprite's top edge in spritesheet\n      - width `Number` - Width of sprite\n      - height `Number` - Height of sprite\n      - total_width `Number` - Width of entire spritesheet\n      - total_height `Number` - Height of entire spritesheet\n      - image `String` - Relative URL path from CSS to spritesheet\n      - escaped_image `String` - URL encoded `image`\n      - source_image `String` - Path to the original sprite file\n      - offset_x `Number` - Negative value of `x`. Useful to `background-position`\n      - offset_y `Number` - Negative value of `y`. Useful to `background-position`\n      - px `Object` - Container for numeric values including `px`\n        - x `String` - `x` suffixed with `px`\n        - y `String` - `y` suffixed with `px`\n        - width `String` - `width` suffixed with `px`\n        - height `String` - `height` suffixed with `px`\n        - total_width `String` - `total_width` suffixed with `px`\n        - total_height `String` - `total_height` suffixed with `px`\n        - offset_x `String` - `offset_x` suffixed with `px`\n        - offset_y `String` - `offset_y` suffixed with `px`\n    - options `Object` - Options passed in via `cssOpts` in `grunt-spritesmith` config\n\n[`json2css`]: https://github.com/twolfson/json2css\n\nAn example sprite `item` is\n\n```js\n{\n  \"name\": \"sprite2\",\n  \"x\": 10,\n  \"y\": 20,\n  \"width\": 20,\n  \"height\": 30,\n  \"total_width\": 80,\n  \"total_height\": 100,\n  \"image\": \"nested/dir/spritesheet.png\",\n  \"escaped_image\": \"nested/dir/spritesheet.png\",\n  \"source_image\": \"path/to/original/sprite.png\",\n  \"offset_x\": -10,\n  \"offset_y\": -20,\n  \"px\": {\n    \"x\": \"10px\",\n    \"y\": \"20px\",\n    \"width\": \"20px\",\n    \"height\": \"30px\",\n    \"total_width\": \"80px\",\n    \"total_height\": \"100px\",\n    \"offset_x\": \"-10px\",\n    \"offset_y\": \"-20px\"\n  }\n}\n```\n\n## Requirements\nFor cross-platform accessibility, [spritesmith][spritesmith] has and supports multiple sprite engines. However, each of these current engines has a different set of external dependencies.\n\n[spritesmith]: https://github.com/Ensighten/spritesmith\n\nIf you are running into issues, consult the [FAQ section](#faqs).\n\n### pngsmith\nThe `pngsmith` engine uses [`pngparse`][], an JavaScript `png` parser, to interpret images into [`ndarrays`][]. This requires no additional steps before installation.\n\n**Key differences:** It requires no additional installation steps but you are limited to `.png` files for your source files.\n\n[`pngparse`]: https://github.com/darkskyapp/pngparse\n[`ndarrays`]: https://github.com/mikolalysenko/ndarray\n\n### phantomjs\nThe `phantomjs` engine relies on having [phantomjs][] installed on your machine. Visit [the phantomjs website][phantomjs] for installation instructions.\n\n**Key differences:** `phantomjs` is the easiest engine to install that supports all image formats.\n\n[spritesmith][] has been tested against `phantomjs@1.9.0`.\n\n[phantomjs]: http://phantomjs.org/\n\n### canvas\nThe `canvas` engine uses [node-canvas][] which has a dependency on [Cairo][cairo].\n\n**Key differences:** `canvas` has the best performance (useful for over 100 sprites). However, it is `UNIX` only.\n\nInstructions on how to install [Cairo][cairo] are provided in the [node-canvas wiki][node-canvas-wiki].\n\nAdditionally, you will need to install [node-gyp][] for the C++ bindings.\n```shell\nsudo npm install -g node-gyp\n```\n\n[node-canvas]: https://github.com/learnboost/node-canvas\n[cairo]: http://cairographics.org/\n[node-canvas-wiki]: https://github.com/LearnBoost/node-canvas/wiki/_pages\n[node-gyp]: https://github.com/TooTallNate/node-gyp/\n\n### gm (Graphics Magick / Image Magick)\nThe `gm` engine depends on [Graphics Magick][graphics-magick] or [Image Magick][image-magick].\n\n**Key differences:** `gm` has the most options for export via `imgOpts`.\n\n[graphics-magick]: http://www.graphicsmagick.org/\n[image-magick]: http://imagemagick.org/\n\nFor the best results, install from the site rather than through a package manager (e.g. `apt-get`). This avoids potential transparency issues which have been reported.\n\n[spritesmith][] has been developed and tested against `1.3.17`.\n\n[Image Magick][image-magick] is implicitly discovered. However, you can explicitly use it via `engineOpts`\n\n```js\n{\n  'engineOpts': {\n    'imagemagick': true\n  }\n}\n```\n\n## FAQs\n### I am seeing errors during installation.\nIf `npm` exits normally, everything should work. These errors are being caused by `npm` attempting to install the various `spritesmith` engines.\n\n### `spritesmith` is saying my engine \"could not be loaded\"\nIf you have specified an `engine` in your config, then you must satisfy its requirements *before* installing `grunt-spritesmith`.\n\nTo remedy this, verify you have installed the appropriate set of requirements for your engine:\n\nhttps://github.com/Ensighten/grunt-spritesmith#requirements\n\nAfterwards, re-install `grunt-spritesmith` so it detects the satisfied requirements for your engine.\n\n```bash\nnpm install grunt-spritesmith\n```\n\n### `spritesmith` is saying \"no spritesmith engine could be loaded for your machine\"\nIf you are running `grunt-spritesmith` before `1.21.0`, then you have not satisfied any of the requirements for any of the engines *before* installing `grunt-spritesmith`. If you are running `1.21.0` or greater, then there is a bug and please open a new issue.\n\n> The current version of `grunt-spritesmith` can be determined via `npm ls grunt-spritesmith`.\n\nTo remedy the issue before `1.21.0`, choose an engine and verify you have installed the appropriate set of requirements:\n\nhttps://github.com/Ensighten/grunt-spritesmith#requirements\n\nAfterwards, re-install `grunt-spritesmith` so it detects the satisfied requirements for your engine.\n\n```bash\nnpm install grunt-spritesmith\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt/) and test via `npm test`.\n\n### Algorithms\nAlgorithms are maintained via [twolfson/layout](https://github.com/twolfson/layout). If you would like to add one, please submit it via a pull request.\n\n### Engines and image options\nEngines and image options are maintained via [Ensighten/spritesmith](https://github.com/Ensighten/spritesmith). If you would like to add one, please submit it via a pull request.\n\n### CSS formats\nCSS formats are maintained via [twolfson/json2css](https://github.com/twolfson/json2css). If you would like to add one, please submit it via a pull request.\n\n## Attribution\n[GitHub][github-icon] and [Twitter][twitter-icon] icons were taken from [Alex Peattie's JustVector Social Icons][justvector].\n\n[Fork][noun-fork-icon] designed by [P.J. Onori][onori] from The Noun Project\n\n[Plus][+] and [Equals][=] icons were built using the [Ubuntu Light typeface][ubuntu-light].\n\n[justvector]: http://alexpeattie.com/projects/justvector_icons/\n[noun-fork-icon]: http://thenounproject.com/noun/fork/#icon-No2813\n[onori]: http://thenounproject.com/somerandomdude\n[ubuntu-light]: http://font.ubuntu.com/\n\n## Donating\nSupport this project and [others by twolfson][gittip] via [gittip][].\n\n[![Support via Gittip][gittip-badge]][gittip]\n\n[gittip-badge]: https://rawgithub.com/twolfson/gittip-badge/master/dist/gittip.png\n[gittip]: https://www.gittip.com/twolfson/\n\n## License\nCopyright (c) 2012-2013 Ensighten\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-spritesmith@1.24.0",
  "dist": {
    "shasum": "58f46731c4ab38d44ccbf8fb7641a25755686026"
  },
  "_from": "grunt-spritesmith@",
  "_resolved": "https://registry.npmjs.org/grunt-spritesmith/-/grunt-spritesmith-1.24.0.tgz"
}
