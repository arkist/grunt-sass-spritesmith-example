{
  "name": "spritesmith",
  "version": "0.18.0",
  "description": "Utility that takes images and creates a spritesheet with JSON sprite data",
  "main": "src/smith.js",
  "scripts": {
    "test": "cd src-test && doubleshot --timeout 60000 --outline smith.outline.js --content smith.content.js"
  },
  "keywords": [
    "sprite",
    "spritesheet",
    "css"
  ],
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com"
  },
  "contributors": "Alex Bain <alex@alexba.in",
  "license": "MIT",
  "dependencies": {
    "async": "~0.2.6",
    "layout": "~1.3.0",
    "phantomjssmith": "~0.4.0",
    "gmsmith": "~0.4.1",
    "canvassmith": "~0.2.0",
    "pngsmith": "~0.1.0"
  },
  "devDependencies": {
    "doubleshot": "~2.13.1",
    "underscore": "~1.4.4"
  },
  "optionalDependencies": {
    "phantomjssmith": "~0.4.0",
    "gmsmith": "~0.4.1",
    "canvassmith": "~0.2.0",
    "pngsmith": "~0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Ensighten/spritesmith.git"
  },
  "readme": "# Spritesmith [![Build status](https://travis-ci.org/Ensighten/spritesmith.png?branch=master)](https://travis-ci.org/Ensighten/spritesmith)\n\nUtility that takes image files and generates [spritesheets](http://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29#Sprites_by_CSS) and coordinate maps.\n\nOnce you have satisfied the [requirements](#requirements), spritesmith can be installed via `npm install spritesmith`.\n\nSpritesmith is also available as a [grunt plugin](https://github.com/Ensighten/grunt-spritesmith).\n\n```js\nvar sprites = ['sprite1.png', 'sprite2.jpg', 'sprite3.png'];\nspritesmith({'src': sprites}, function (err, result) {\n  result.image; // Binary string representation of image\n  result.coordinates; // Object mapping filename to {x, y, width, height} of image\n  result.properties; // Object with metadata about spritesheet {width, height}\n});\n```\n\n## Installation\n`spritesmith` can be installed via npm: `npm install spritesmith`\n\nEach engine has system level depedencies. Visit the [requirements section][requirements] for more information.\n\n[requirements]: #requirements\n\nDuring installation, you may see errors for other engines. These should be ignored unless `npm` crashes.\n\n## Documentation\nSpritesmith is a standalone function\n\n```js\n/**\n * Spritesmith generation function\n * @param {Object} params Parameters for spritesmith\n * @param {String[]} [params.src] Images to generate into sprite sheet\n * @param {String} [params.engine=\"auto\"] Engine to use\n      (phantomjs, canvas, gm, pngsmith or user-defined via Spritesmith.addEngine)\n * @param {String} [params.algorithm=\"top-down\"] Algorithm to pack images with\n * @param {Number} [params.padding] Padding to use between images\n * @param {Mixed} [params.engineOpts] Options to pass through to engine for settings\n * @param {Mixed} [params.exportOpts] Options to pass through to engine for export\n * @param {Function} callback Function that receives compiled spritesheet and map\n * @returns {Mixed} callback[0] err If an error was encountered, this will be returned to callback\n * @returns {Object} callback[1] result Result object of spritesmith\n * @returns {String} callback[1].image Binary string representation of image\n * @returns {Object} callback[1].coordinates Map from file name to an object containing x, y, height, and width information about the source image\n * @returns {Object} callback[1].properties Properties about the spritesheet itself\n * @returns {Object} callback[1].properties.width Width of the spritesheet\n * @returns {Object} callback[1].properties.height Height of the spritesheet\n */\n```\n\n### PhantomJS export options\nFor the `phantomjs` engine, the current output options are:\n\n```js\n{\n  'timeout': 10000 // Milliseconds to wait until terminating PhantomJS script\n}\n```\n\n### Canvas export options\nFor the `canvas` engine, the current output options are:\n\n```js\n{\n  'format': 'png' // Format to export the canvas to (png or jpeg)\n}\n```\n\n### gm export options\nFor the `gm` engine, the current output options are:\n\n```js\n{\n  'format': 'png', // Format to export the canvas to (png or jpeg)\n  'quality': 75 // Quality of the output image\n}\n```\n\n### Available packing algorithms\nThe available packing algorithms are: `top-down`, `left-right`, `diagonal` (\\\\ format), `alt-diagonal` (/ format), `binary-tree` (best packing possible).\n\n### Adding new engines\nExample engines can be found in [src/engines](tree/master/src/engines).\n\nNew engines can be added via `Spritesmith.addEngine(name, engine);`.\n\nIf you decide to build a new engine, there are some utilities in [src/utils](tree/master/src/utils) which may be helpful.\n\n### Adding new packing algorithms\nAlgorithms are maintained inside of [twolfson/layout](https://github.com/twolfson/layout/). Example algorithms can be found in [twolfson/layout/lib/algorithms](https://github.com/twolfson/layout/tree/master/lib/algorithms).\n\nNew algorithms can be added via `Spritesmith.Layout.addAlgorithm(name, algorithm);`.\n\n## Requirements\nFor cross-platform accessibility, `spritesmith` has and supports multiple sprite engines. However, each of these current engines has a different set of external dependencies.\n\n### pngsmith\nThe `pngsmith` engine uses [`pngparse`][], an JavaScript `png` parser, to interpret images into [`ndarrays`][]. This requires no additional steps before installation.\n\n**Key differences:** It requires no additional installation steps but you are limited to `.png` files for your source files.\n\n[`pngparse`]: https://github.com/darkskyapp/pngparse\n[`ndarrays`]: https://github.com/mikolalysenko/ndarray\n\n### phantomjs\nThe `phantomjs` engine relies on having [phantomjs][] installed on your machine. Visit [the phantomjs website][phantomjs] for installation instructions.\n\n**Key differences:** `phantomjs` is the easiest engine to install that supports all image formats.\n\n`spritesmith` has been tested against `phantomjs@1.9.0`.\n\n[phantomjs]: http://phantomjs.org/\n\n### canvas\nThe `canvas` engine uses [node-canvas][] which has a dependency on [Cairo][cairo].\n\n**Key differences:** `canvas` has the best performance (useful for over 100 sprites). However, it is `UNIX` only.\n\nInstructions on how to install [Cairo][cairo] are provided in the [node-canvas wiki][node-canvas-wiki].\n\nAdditionally, you will need to install [node-gyp][] for the C++ bindings.\n```shell\nsudo npm install -g node-gyp\n```\n\n[node-canvas]: https://github.com/learnboost/node-canvas\n[cairo]: http://cairographics.org/\n[node-canvas-wiki]: (https://github.com/LearnBoost/node-canvas/wiki/_pages\n[node-gyp]: https://github.com/TooTallNate/node-gyp/\n\n### gm (Graphics Magick / Image Magick)\nThe `gm` engine depends on [Graphics Magick][graphics-magick] or [Image Magick][image-magick].\n\n**Key differences:** `gm` has the most options for export via `imgOpts`.\n\n[graphics-magick]: http://www.graphicsmagick.org/\n[image-magick]: http://imagemagick.org/\n\nFor the best results, install from the site rather than through a package manager (e.g. `apt-get`). This avoids potential transparency issues which have been reported.\n\n`spritesmith` has been developed and tested against `1.3.17`.\n\n[Image Magick][image-magick] is implicitly discovered. However, you can explicitly use it via `engineOpts`\n\n```js\n{\n  'engineOpts': {\n    'imagemagick': true\n  }\n}\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt/) and test via `npm test`.\n\n## Donating\nSupport this project and [others by twolfson][gittip] via [gittip][].\n\n[![Support via Gittip][gittip-badge]][gittip]\n\n[gittip-badge]: https://rawgithub.com/twolfson/gittip-badge/master/dist/gittip.png\n[gittip]: https://www.gittip.com/twolfson/\n\n## License\nCopyright (c) 2012 - 2013 Ensighten\n\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Ensighten/spritesmith/issues"
  },
  "homepage": "https://github.com/Ensighten/spritesmith",
  "_id": "spritesmith@0.18.0",
  "_from": "spritesmith@~0.18.0"
}
