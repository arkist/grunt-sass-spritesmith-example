{
  "name": "get-pixels",
  "version": "1.0.1",
  "description": "Reads the pixels of an image as an ndarray",
  "main": "node-pixels.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "ndarray": "~1.0.0",
    "pngparse": "~1.1.4",
    "ppm": "0.0.0",
    "ndarray-pack": "1.0.0"
  },
  "devDependencies": {
    "tap": "~0.4.2"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/get-pixels.git"
  },
  "keywords": [
    "ndarray",
    "pixel",
    "get",
    "read",
    "pixel",
    "image",
    "png",
    "jpeg",
    "parse",
    "dom",
    "node",
    "browserify"
  ],
  "browser": "dom-pixels.js",
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "380bbda330666e4a4066c48ef5a42770d13bcd5c",
  "readme": "get-pixels\n==========\nGiven a URL/path, grab all the pixels in an image and return the result as an [ndarray](https://github.com/mikolalysenko/ndarray).  Works both in browserify and in node.js.\n\n**Note** On the node side, currently only supports PNG and PPM.  Patches welcome!!!\n\nExample\n=======\n\n```javascript\nvar getPixels = require(\"get-pixels\")\n\ngetPixels(\"lena.png\", function(err, pixels) {\n  if(err) {\n    console.log(\"Bad image path\")\n    return\n  }\n  console.log(\"got pixels\", pixels.shape)\n})\n```\n\nInstall\n=======\n\n    npm install get-pixels\n\n### `require(\"get-pixels\")(url, cb(err, pixels))`\nReads all the pixels from url into an ndarray.\n\n* `url` is the path to the file\n* `cb(err, pixels)` is a callback which gets triggered once the image is loaded.\n\n**Returns** An ndarray of pixels in raster order having shape equal to `[rows, columns, channels]`.\n\nCredits\n=======\n(c) 2013 Mikola Lysenko. MIT License",
  "bugs": {
    "url": "https://github.com/mikolalysenko/get-pixels/issues"
  },
  "homepage": "https://github.com/mikolalysenko/get-pixels",
  "_id": "get-pixels@1.0.1",
  "_from": "get-pixels@~1.0.1"
}
